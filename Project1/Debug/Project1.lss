
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  0000047e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000780  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000683  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000459  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000177c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b2  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000163  00000000  00000000  00001bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main(void)
{
	/* Set PortD to all outputs because LEDs are connected to this PORT */
	DDRD = 0xff;	/* 0xff = 0b11111111; all ones						*/
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	DDRB=0x00;
  94:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b00110000; // Enable Programmable pull-ups on bits 5 and 4 on port B
  96:	80 e3       	ldi	r24, 0x30	; 48
  98:	85 b9       	out	0x05, r24	; 5
	PCMSK0 = 0b00110000; // Pin change mask register set to bits 5 and 4
  9a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	PCICR = 0b00000001; //Pin change Interrupt control register set to 1 
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	
	timecount0 = 0;		/* Initialise the overflow count. Note its scope	*/
  a4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timecount0+0x1>
  a8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timecount0>
	TCCR0B = (5<<CS00);	/* Set T0 Source = Clock (16MHz)/1024 and put Timer in Normal mode	*/
  ac:	95 e0       	ldi	r25, 0x05	; 5
  ae:	95 bd       	out	0x25, r25	; 37
	
	TCCR0A = 0;			/* Not strictly necessary as these are the reset states but it's good	*/
  b0:	14 bc       	out	0x24, r1	; 36
	/* practice to show what you're doing									*/
	TCNT0 = 61;			/* Recall: 256-61 = 195 & 195*64us = 12.48ms, approx 12.5ms		*/
  b2:	9d e3       	ldi	r25, 0x3D	; 61
  b4:	96 bd       	out	0x26, r25	; 38
	TIMSK0 = (1<<TOIE0);		/* Enable Timer 0 interrupt										*/
  b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	ADMUX = ((1<<REFS0) | (0<<MUX0));  /* AVCC selected for VREF, ADC channel 0 as ADC input  */
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = ((1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(7<<ADPS0));
  c0:	8f ee       	ldi	r24, 0xEF	; 239
  c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = (0<<ADTS0); //Select AutoTrigger Source to Free Running Mode
  c6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	/* Enable ADC,Start Conversion,Auto Trigger enabled,
	Interrupt enabled, Prescaler = 128  */
	
	sei();						/* Global interrupt enable (I=1)								*/
  ca:	78 94       	sei
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x3c>

000000ce <__vector_21>:
	
}


ISR (ADC_vect)//handles ADC interrupts
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25


	adc_reading = ADC;   /* ADC is in Free Running Mode */
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <adc_reading+0x1>
  ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <adc_reading>
	
	
	if (adc_reading  >=0 && adc_reading <=512)
  ee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
  f2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
  f6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
  fa:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	92 40       	sbci	r25, 0x02	; 2
 102:	38 f4       	brcc	.+14     	; 0x112 <__vector_21+0x44>
	{
		delay=20; //If adc reading is between 0 and 2.5V, the speed is 0.25 S
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <delay+0x1>
 10c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <delay>
 110:	06 c0       	rjmp	.+12     	; 0x11e <__vector_21+0x50>
	}
	else
	{
		delay=80; //Otherwise the speed is 1S
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <delay+0x1>
 11a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <delay>
	}
	
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_16>:


ISR(TIMER0_OVF_vect)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	TCNT0 = 61;		//	TCNT0 needs to be set to the start point each time
 144:	8d e3       	ldi	r24, 0x3D	; 61
 146:	86 bd       	out	0x26, r24	; 38
	++timecount0;			//count the number of times the interrupt has been reached
 148:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <timecount0>
 14c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <timecount0+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <timecount0+0x1>
 156:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <timecount0>
	
	
	if (timecount0 >= COUNT_FOR_10ms)	//	500 * 2ms = 1s
 15a:	05 97       	sbiw	r24, 0x05	; 5
 15c:	08 f4       	brcc	.+2      	; 0x160 <__vector_16+0x32>
 15e:	48 c1       	rjmp	.+656    	; 0x3f0 <__vector_16+0x2c2>
	{

		
		if((PINB & 0b00110000) == 0b00110000) //If no push buttons are pressed. If Pin B bit 5==1 & 4==1;
 160:	83 b1       	in	r24, 0x03	; 3
 162:	80 73       	andi	r24, 0x30	; 48
 164:	80 33       	cpi	r24, 0x30	; 48
 166:	09 f0       	breq	.+2      	; 0x16a <__vector_16+0x3c>
 168:	55 c0       	rjmp	.+170    	; 0x214 <__vector_16+0xe6>
		{
			
			static int i;
			static int j;
			
			if(i==0)
 16a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i.1618>
 16e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i.1618+0x1>
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	49 f4       	brne	.+18     	; 0x188 <__vector_16+0x5a>
			{
				
				PORTD=1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	8b b9       	out	0x0b, r24	; 11
				i=1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i.1618+0x1>
 182:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i.1618>
 186:	3d c0       	rjmp	.+122    	; 0x202 <__vector_16+0xd4>
			}
			else if (i<128 && j==0)
 188:	80 38       	cpi	r24, 0x80	; 128
 18a:	91 05       	cpc	r25, r1
 18c:	9c f4       	brge	.+38     	; 0x1b4 <__vector_16+0x86>
 18e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <j.1619>
 192:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <j.1619+0x1>
 196:	23 2b       	or	r18, r19
 198:	69 f4       	brne	.+26     	; 0x1b4 <__vector_16+0x86>
			{
				PORTD=i<<1;
 19a:	88 0f       	add	r24, r24
 19c:	8b b9       	out	0x0b, r24	; 11
				i=i<<1;
 19e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i.1618>
 1a2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i.1618+0x1>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i.1618+0x1>
 1ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i.1618>
 1b2:	17 c0       	rjmp	.+46     	; 0x1e2 <__vector_16+0xb4>
			}
			else if(i>1 && j==1)
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	91 05       	cpc	r25, r1
 1b8:	a4 f0       	brlt	.+40     	; 0x1e2 <__vector_16+0xb4>
 1ba:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <j.1619>
 1be:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <j.1619+0x1>
 1c2:	21 30       	cpi	r18, 0x01	; 1
 1c4:	31 05       	cpc	r19, r1
 1c6:	69 f4       	brne	.+26     	; 0x1e2 <__vector_16+0xb4>
			{
				PORTD=i>>1;
 1c8:	95 95       	asr	r25
 1ca:	87 95       	ror	r24
 1cc:	8b b9       	out	0x0b, r24	; 11
				i=i>>1;
 1ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i.1618>
 1d2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i.1618+0x1>
 1d6:	95 95       	asr	r25
 1d8:	87 95       	ror	r24
 1da:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <i.1618+0x1>
 1de:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <i.1618>
			}
			
			if(i==128)
 1e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <i.1618>
 1e6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <i.1618+0x1>
 1ea:	80 38       	cpi	r24, 0x80	; 128
 1ec:	91 05       	cpc	r25, r1
 1ee:	39 f4       	brne	.+14     	; 0x1fe <__vector_16+0xd0>
			{
				j=1;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <j.1619+0x1>
 1f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <j.1619>
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <__vector_16+0xdc>
			}
			else if(i==1)
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	21 f4       	brne	.+8      	; 0x20a <__vector_16+0xdc>
			{
				j=0;
 202:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <j.1619+0x1>
 206:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <j.1619>
			}
			timecount0=0;
 20a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timecount0+0x1>
 20e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timecount0>
 212:	ee c0       	rjmp	.+476    	; 0x3f0 <__vector_16+0x2c2>
		}
		else if((PINB & 0b00010000) == 0b00000000) //If Push button S1 is pressed . If Pin B bit 5==1  & bit 4 == 0
 214:	1c 99       	sbic	0x03, 4	; 3
 216:	4f c0       	rjmp	.+158    	; 0x2b6 <__vector_16+0x188>
		{
			
			int a = adc_reading;
 218:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 21c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 220:	ac 01       	movw	r20, r24
			//goes through each increment of adc_reading and and changes portd to value it should 
			if(0>=a && a<128)
 222:	18 16       	cp	r1, r24
 224:	19 06       	cpc	r1, r25
 226:	14 f0       	brlt	.+4      	; 0x22c <__vector_16+0xfe>
			PORTD = 0x00;
 228:	1b b8       	out	0x0b, r1	; 11
 22a:	40 c0       	rjmp	.+128    	; 0x2ac <__vector_16+0x17e>
			else if(a>=128 && a<256)
 22c:	9c 01       	movw	r18, r24
 22e:	20 58       	subi	r18, 0x80	; 128
 230:	31 09       	sbc	r19, r1
 232:	20 38       	cpi	r18, 0x80	; 128
 234:	31 05       	cpc	r19, r1
 236:	18 f4       	brcc	.+6      	; 0x23e <__vector_16+0x110>
			PORTD = 0x01;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	8b b9       	out	0x0b, r24	; 11
 23c:	37 c0       	rjmp	.+110    	; 0x2ac <__vector_16+0x17e>
			else if(a>=256 && a<384)
 23e:	9c 01       	movw	r18, r24
 240:	3a 95       	dec	r19
 242:	20 38       	cpi	r18, 0x80	; 128
 244:	31 05       	cpc	r19, r1
 246:	18 f4       	brcc	.+6      	; 0x24e <__vector_16+0x120>
			PORTD = 0x03;
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	8b b9       	out	0x0b, r24	; 11
 24c:	2f c0       	rjmp	.+94     	; 0x2ac <__vector_16+0x17e>
			else if(a>=384 && a<512)
 24e:	9c 01       	movw	r18, r24
 250:	20 58       	subi	r18, 0x80	; 128
 252:	31 40       	sbci	r19, 0x01	; 1
 254:	20 38       	cpi	r18, 0x80	; 128
 256:	31 05       	cpc	r19, r1
 258:	18 f4       	brcc	.+6      	; 0x260 <__vector_16+0x132>
			PORTD = 0x07;
 25a:	87 e0       	ldi	r24, 0x07	; 7
 25c:	8b b9       	out	0x0b, r24	; 11
 25e:	26 c0       	rjmp	.+76     	; 0x2ac <__vector_16+0x17e>
			else if(a>=512 && a<640)
 260:	9c 01       	movw	r18, r24
 262:	32 50       	subi	r19, 0x02	; 2
 264:	20 38       	cpi	r18, 0x80	; 128
 266:	31 05       	cpc	r19, r1
 268:	18 f4       	brcc	.+6      	; 0x270 <__vector_16+0x142>
			PORTD = 0x0f;
 26a:	8f e0       	ldi	r24, 0x0F	; 15
 26c:	8b b9       	out	0x0b, r24	; 11
 26e:	1e c0       	rjmp	.+60     	; 0x2ac <__vector_16+0x17e>
			else if(a>=640 && a<768)
 270:	9c 01       	movw	r18, r24
 272:	20 58       	subi	r18, 0x80	; 128
 274:	32 40       	sbci	r19, 0x02	; 2
 276:	20 38       	cpi	r18, 0x80	; 128
 278:	31 05       	cpc	r19, r1
 27a:	18 f4       	brcc	.+6      	; 0x282 <__vector_16+0x154>
			PORTD = 0x1f;
 27c:	8f e1       	ldi	r24, 0x1F	; 31
 27e:	8b b9       	out	0x0b, r24	; 11
 280:	15 c0       	rjmp	.+42     	; 0x2ac <__vector_16+0x17e>
			else if(a>=768 && a<896)
 282:	9c 01       	movw	r18, r24
 284:	33 50       	subi	r19, 0x03	; 3
 286:	20 38       	cpi	r18, 0x80	; 128
 288:	31 05       	cpc	r19, r1
 28a:	18 f4       	brcc	.+6      	; 0x292 <__vector_16+0x164>
			PORTD = 0x3f;
 28c:	8f e3       	ldi	r24, 0x3F	; 63
 28e:	8b b9       	out	0x0b, r24	; 11
 290:	0d c0       	rjmp	.+26     	; 0x2ac <__vector_16+0x17e>
			//A lower value than 1024 was used as 1024 was never fully reached with the potentiometer
			else if(a>=896 && a<1015)
 292:	80 58       	subi	r24, 0x80	; 128
 294:	93 40       	sbci	r25, 0x03	; 3
 296:	87 37       	cpi	r24, 0x77	; 119
 298:	91 05       	cpc	r25, r1
 29a:	18 f4       	brcc	.+6      	; 0x2a2 <__vector_16+0x174>
			PORTD = 0x7f;
 29c:	8f e7       	ldi	r24, 0x7F	; 127
 29e:	8b b9       	out	0x0b, r24	; 11
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <__vector_16+0x17e>
			else if(a>=1015)
 2a2:	47 3f       	cpi	r20, 0xF7	; 247
 2a4:	53 40       	sbci	r21, 0x03	; 3
 2a6:	14 f0       	brlt	.+4      	; 0x2ac <__vector_16+0x17e>
			PORTD = 0xff;
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	8b b9       	out	0x0b, r24	; 11
			timecount0=0;
 2ac:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timecount0+0x1>
 2b0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timecount0>
 2b4:	9d c0       	rjmp	.+314    	; 0x3f0 <__vector_16+0x2c2>
		}
		
		
		else if ((PINB & 0b00000000) == 0b00000000) //If push button pin S2 is pressed. If Pin B bit 5==0 
 2b6:	83 b1       	in	r24, 0x03	; 3
			int halfd2=0x00;		
			static int i;
			static int j;
			
			//Have Cylon eyes show on bits 3-0 on PORTD
			if(i==0)
 2b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1623>
 2bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1623+0x1>
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	49 f4       	brne	.+18     	; 0x2d6 <__vector_16+0x1a8>
			{
				
				halfd=1;
				i=1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i.1623+0x1>
 2cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i.1623>
			
			//Have Cylon eyes show on bits 3-0 on PORTD
			if(i==0)
			{
				
				halfd=1;
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	38 c0       	rjmp	.+112    	; 0x346 <__vector_16+0x218>
				i=1;
			}
			else if (i<8 && j==0)
 2d6:	88 30       	cpi	r24, 0x08	; 8
 2d8:	91 05       	cpc	r25, r1
 2da:	74 f4       	brge	.+28     	; 0x2f8 <__vector_16+0x1ca>
 2dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 2e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 2e4:	23 2b       	or	r18, r19
 2e6:	41 f4       	brne	.+16     	; 0x2f8 <__vector_16+0x1ca>
			{
				halfd=i<<1;
 2e8:	9c 01       	movw	r18, r24
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
				i=i<<1;
 2ee:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <i.1623+0x1>
 2f2:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <i.1623>
 2f6:	17 c0       	rjmp	.+46     	; 0x326 <__vector_16+0x1f8>
			}
			else if(i>1 && j==1)
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	91 05       	cpc	r25, r1
 2fc:	7c f0       	brlt	.+30     	; 0x31c <__vector_16+0x1ee>
 2fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 302:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 306:	21 30       	cpi	r18, 0x01	; 1
 308:	31 05       	cpc	r19, r1
 30a:	59 f4       	brne	.+22     	; 0x322 <__vector_16+0x1f4>
			{
				halfd=i>>1;
 30c:	9c 01       	movw	r18, r24
 30e:	35 95       	asr	r19
 310:	27 95       	ror	r18
				i=i>>1;
 312:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <i.1623+0x1>
 316:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <i.1623>
 31a:	05 c0       	rjmp	.+10     	; 0x326 <__vector_16+0x1f8>
		}
		
		
		else if ((PINB & 0b00000000) == 0b00000000) //If push button pin S2 is pressed. If Pin B bit 5==0 
		{
			int halfd=0x00; //Two variables created in order to have half of PortD allocated to bits 7-4 and half to bits 3-0
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <__vector_16+0x1f8>
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 e0       	ldi	r19, 0x00	; 0
			{
				halfd=i>>1;
				i=i>>1;
			}
			
			if(i==8)
 326:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i.1623>
 32a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i.1623+0x1>
 32e:	88 30       	cpi	r24, 0x08	; 8
 330:	91 05       	cpc	r25, r1
 332:	39 f4       	brne	.+14     	; 0x342 <__vector_16+0x214>
			{
				j=1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 33c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 340:	06 c0       	rjmp	.+12     	; 0x34e <__vector_16+0x220>
			}
			else if(i==1)
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	21 f4       	brne	.+8      	; 0x34e <__vector_16+0x220>
			{
				j=0;
 346:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 34a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			}
			
			
			//Have upper half of the ADC values show on bits 7-4 on PORTD
			if(0>=adc_reading && adc_reading<256)
 34e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 352:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 356:	89 2b       	or	r24, r25
 358:	41 f4       	brne	.+16     	; 0x36a <__vector_16+0x23c>
 35a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 35e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 362:	8f 3f       	cpi	r24, 0xFF	; 255
 364:	91 05       	cpc	r25, r1
 366:	a9 f1       	breq	.+106    	; 0x3d2 <__vector_16+0x2a4>
 368:	a0 f1       	brcs	.+104    	; 0x3d2 <__vector_16+0x2a4>
			halfd2 = 0x00;
			else if(adc_reading>=256 && adc_reading<512)
 36a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 36e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 372:	8f 3f       	cpi	r24, 0xFF	; 255
 374:	91 05       	cpc	r25, r1
 376:	41 f0       	breq	.+16     	; 0x388 <__vector_16+0x25a>
 378:	38 f0       	brcs	.+14     	; 0x388 <__vector_16+0x25a>
 37a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 37e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 382:	81 15       	cp	r24, r1
 384:	92 40       	sbci	r25, 0x02	; 2
 386:	38 f1       	brcs	.+78     	; 0x3d6 <__vector_16+0x2a8>
			halfd2 = 0x10;
			else if(adc_reading>=512 && adc_reading<768)
 388:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 38c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 390:	81 15       	cp	r24, r1
 392:	92 40       	sbci	r25, 0x02	; 2
 394:	38 f0       	brcs	.+14     	; 0x3a4 <__vector_16+0x276>
 396:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 39a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 39e:	81 15       	cp	r24, r1
 3a0:	93 40       	sbci	r25, 0x03	; 3
 3a2:	d8 f0       	brcs	.+54     	; 0x3da <__vector_16+0x2ac>
			halfd2 = 0x30;
			//had to use slightly lower value than 1024 as 1024 was never fully reached with the potentiometer
			else if(adc_reading>=768 && adc_reading<1015)
 3a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 3a8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 3ac:	81 15       	cp	r24, r1
 3ae:	93 40       	sbci	r25, 0x03	; 3
 3b0:	38 f0       	brcs	.+14     	; 0x3c0 <__vector_16+0x292>
 3b2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 3b6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 3ba:	87 3f       	cpi	r24, 0xF7	; 247
 3bc:	93 40       	sbci	r25, 0x03	; 3
 3be:	78 f0       	brcs	.+30     	; 0x3de <__vector_16+0x2b0>
			halfd2 = 0x70;
			else if(adc_reading>=1015)
 3c0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc_reading>
 3c4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc_reading+0x1>
 3c8:	87 3f       	cpi	r24, 0xF7	; 247
 3ca:	93 40       	sbci	r25, 0x03	; 3
 3cc:	50 f0       	brcs	.+20     	; 0x3e2 <__vector_16+0x2b4>
			halfd2 = 0xf0;
 3ce:	80 ef       	ldi	r24, 0xF0	; 240
 3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <__vector_16+0x2b6>
			}
			
			
			//Have upper half of the ADC values show on bits 7-4 on PORTD
			if(0>=adc_reading && adc_reading<256)
			halfd2 = 0x00;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <__vector_16+0x2b6>
			else if(adc_reading>=256 && adc_reading<512)
			halfd2 = 0x10;
 3d6:	80 e1       	ldi	r24, 0x10	; 16
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <__vector_16+0x2b6>
			else if(adc_reading>=512 && adc_reading<768)
			halfd2 = 0x30;
 3da:	80 e3       	ldi	r24, 0x30	; 48
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <__vector_16+0x2b6>
			//had to use slightly lower value than 1024 as 1024 was never fully reached with the potentiometer
			else if(adc_reading>=768 && adc_reading<1015)
			halfd2 = 0x70;
 3de:	80 e7       	ldi	r24, 0x70	; 112
 3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <__vector_16+0x2b6>
		
		
		else if ((PINB & 0b00000000) == 0b00000000) //If push button pin S2 is pressed. If Pin B bit 5==0 
		{
			int halfd=0x00; //Two variables created in order to have half of PortD allocated to bits 7-4 and half to bits 3-0
			int halfd2=0x00;		
 3e2:	80 e0       	ldi	r24, 0x00	; 0
			else if(adc_reading>=768 && adc_reading<1015)
			halfd2 = 0x70;
			else if(adc_reading>=1015)
			halfd2 = 0xf0;
			//add the two halfs of portd together to display
			PORTD = halfd + halfd2;
 3e4:	82 0f       	add	r24, r18
 3e6:	8b b9       	out	0x0b, r24	; 11
			timecount0=0;
 3e8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timecount0+0x1>
 3ec:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <timecount0>
		}

	}
	
}
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
